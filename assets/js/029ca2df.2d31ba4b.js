"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[950],{6927:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Document 001/022","title":"22. MySQL Database Access","description":"The Python...","source":"@site/docs/Document 001/022.md","sourceDirName":"Document 001","slug":"/Document 001/022","permalink":"/blog/docs/Document 001/022","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"22. MySQL Database Access","description":"The Python...","lead":"","date":"2022-01-25T13:41:39.000Z","lastmod":"2022-01-25T13:41:39.000Z","draft":false,"images":[],"type":"docs","toc":true,"weight":22},"sidebar":"sidebar_doc_001","previous":{"title":"21. CGI Programming","permalink":"/blog/docs/Document 001/021"},"next":{"title":"23. Network Programming","permalink":"/blog/docs/Document 001/023"}}');var s=t(4848),a=t(8453);const o={title:"22. MySQL Database Access",description:"The Python...",lead:"",date:new Date("2022-01-25T13:41:39.000Z"),lastmod:new Date("2022-01-25T13:41:39.000Z"),draft:!1,images:[],type:"docs",toc:!0,weight:22},l=void 0,i={},c=[{value:"What is MySQLdb?",id:"what-is-mysqldb",level:2},{value:"How do I Install MySQLdb?",id:"how-do-i-install-mysqldb",level:2},{value:"Database Connection",id:"database-connection",level:2},{value:"Example",id:"example",level:3},{value:"Creating Database Table",id:"creating-database-table",level:2},{value:"Example",id:"example-1",level:3},{value:"INSERT Operation",id:"insert-operation",level:2},{value:"Example",id:"example-2",level:3},{value:"Example",id:"example-3",level:3},{value:"READ Operation",id:"read-operation",level:2},{value:"Example",id:"example-4",level:3},{value:"Update Operation",id:"update-operation",level:2},{value:"Example",id:"example-5",level:3},{value:"DELETE Operation",id:"delete-operation",level:2},{value:"Example",id:"example-6",level:3},{value:"Performing Transactions",id:"performing-transactions",level:2},{value:"Example",id:"example-7",level:3},{value:"COMMIT Operation",id:"commit-operation",level:2},{value:"ROLLBACK Operation",id:"rollback-operation",level:2},{value:"Disconnecting Database",id:"disconnecting-database",level:2},{value:"Handling Errors",id:"handling-errors",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The Python standard for database interfaces is the Python DB-API. Most Python database interfaces adhere to this standard."}),"\n",(0,s.jsx)(n.p,{children:"You can choose the right database for your application. Python Database API supports a wide range of database servers such as \u2212"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"GadFly"}),"\n",(0,s.jsx)(n.li,{children:"mSQL"}),"\n",(0,s.jsx)(n.li,{children:"MySQL"}),"\n",(0,s.jsx)(n.li,{children:"PostgreSQL"}),"\n",(0,s.jsx)(n.li,{children:"Microsoft SQL Server 2000"}),"\n",(0,s.jsx)(n.li,{children:"Informix"}),"\n",(0,s.jsx)(n.li,{children:"Interbase"}),"\n",(0,s.jsx)(n.li,{children:"Oracle"}),"\n",(0,s.jsx)(n.li,{children:"Sybase"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Here is the list of available Python database interfaces: ",(0,s.jsx)(n.a,{href:"http://wiki.python.org/moin/DatabaseInterfaces",children:"Python Database Interfaces and APIs"}),". You must download a separate DB API module for each database you need to access. For example, if you need to access an Oracle database as well as a MySQL database, you must download both the Oracle and the MySQL database modules."]}),"\n",(0,s.jsx)(n.p,{children:"The DB API provides a minimal standard for working with databases using Python structures and syntax wherever possible. This API includes the following \u2212"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Importing the API module."}),"\n",(0,s.jsx)(n.li,{children:"Acquiring a connection with the database."}),"\n",(0,s.jsx)(n.li,{children:"Issuing SQL statements and stored procedures."}),"\n",(0,s.jsx)(n.li,{children:"Closing the connection"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"We would learn all the concepts using MySQL, so let us talk about MySQLdb module."}),"\n",(0,s.jsx)(n.h2,{id:"what-is-mysqldb",children:"What is MySQLdb?"}),"\n",(0,s.jsx)(n.p,{children:"MySQLdb is an interface for connecting to a MySQL database server from Python. It implements the Python Database API v2.0 and is built on top of the MySQL C API."}),"\n",(0,s.jsx)(n.h2,{id:"how-do-i-install-mysqldb",children:"How do I Install MySQLdb?"}),"\n",(0,s.jsx)(n.p,{children:"Before proceeding, you make sure you have MySQLdb installed on your machine. Just type the following in your Python script and execute it \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/python\n\nimport MySQLdb\n"})}),"\n",(0,s.jsx)(n.p,{children:"If it produces the following result, then it means MySQLdb module is not installed \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'Traceback (most recent call last):\nFile "test.py", line 3, in <module>\nimport MySQLdb\nImportError: No module named MySQLdb\n'})}),"\n",(0,s.jsx)(n.p,{children:"To install MySQLdb module, use the following command \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"For Ubuntu, use the following command -\n$ sudo apt-get install python-pip python-dev libmysqlclient-dev\nFor Fedora, use the following command -\n$ sudo dnf install python python-devel mysql-devel redhat-rpm-config gcc\nFor Python command prompt, use the following command -\npip install MySQL-python\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"})," \u2212 Make sure you have root privilege to install above module."]}),"\n",(0,s.jsx)(n.h2,{id:"database-connection",children:"Database Connection"}),"\n",(0,s.jsx)(n.p,{children:"Before connecting to a MySQL database, make sure of the followings \u2212"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"You have created a database TESTDB."}),"\n",(0,s.jsx)(n.li,{children:"You have created a table EMPLOYEE in TESTDB."}),"\n",(0,s.jsx)(n.li,{children:"This table has fields FIRST_NAME, LAST_NAME, AGE, SEX and INCOME."}),"\n",(0,s.jsx)(n.li,{children:'User ID "testuser" and password "test123" are set to access TESTDB.'}),"\n",(0,s.jsx)(n.li,{children:"Python module MySQLdb is installed properly on your machine."}),"\n",(0,s.jsxs)(n.li,{children:["You have gone through MySQL tutorial to understand ",(0,s.jsx)(n.a,{href:"https://www.tutorialspoint.com/mysql/index.htm",children:"MySQL Basics."})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:'Following is the example of connecting with MySQL database "TESTDB"'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect("localhost","testuser","test123","TESTDB" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# execute SQL query using execute() method.\ncursor.execute("SELECT VERSION()")\n\n# Fetch a single row using fetchone() method.\ndata = cursor.fetchone()\nprint "Database version : %s " % data\n\n# disconnect from server\ndb.close()\n'})}),"\n",(0,s.jsx)(n.p,{children:"While running this script, it is producing the following result in my Linux machine."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"Database version : 5.0.45\n"})}),"\n",(0,s.jsxs)(n.p,{children:["If a connection is established with the datasource, then a Connection Object is returned and saved into ",(0,s.jsx)(n.strong,{children:"db"})," for further use, otherwise ",(0,s.jsx)(n.strong,{children:"db"})," is set to None. Next, ",(0,s.jsx)(n.strong,{children:"db"})," object is used to create a ",(0,s.jsx)(n.strong,{children:"cursor"})," object, which in turn is used to execute SQL queries. Finally, before coming out, it ensures that database connection is closed and resources are released."]}),"\n",(0,s.jsx)(n.h2,{id:"creating-database-table",children:"Creating Database Table"}),"\n",(0,s.jsxs)(n.p,{children:["Once a database connection is established, we are ready to create tables or records into the database tables using ",(0,s.jsx)(n.strong,{children:"execute"})," method of the created cursor."]}),"\n",(0,s.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Let us create Database table EMPLOYEE \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect("localhost","testuser","test123","TESTDB" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Drop table if it already exist using execute() method.\ncursor.execute("DROP TABLE IF EXISTS EMPLOYEE")\n\n# Create table as per requirement\nsql = """CREATE TABLE EMPLOYEE (\n         FIRST_NAME  CHAR(20) NOT NULL,\n         LAST_NAME  CHAR(20),\n         AGE INT,  \n         SEX CHAR(1),\n         INCOME FLOAT )"""\n\ncursor.execute(sql)\n\n# disconnect from server\ndb.close()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"insert-operation",children:"INSERT Operation"}),"\n",(0,s.jsx)(n.p,{children:"It is required when you want to create your records into a database table."}),"\n",(0,s.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,s.jsxs)(n.p,{children:["The following example, executes SQL ",(0,s.jsx)(n.em,{children:"INSERT"})," statement to create a record into EMPLOYEE table \u2212"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect("localhost","testuser","test123","TESTDB" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to INSERT a record into the database.\nsql = """INSERT INTO EMPLOYEE(FIRST_NAME,\n         LAST_NAME, AGE, SEX, INCOME)\n         VALUES (\'Mac\', \'Mohan\', 20, \'M\', 2000)"""\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n'})}),"\n",(0,s.jsx)(n.p,{children:"Above example can be written as follows to create SQL queries dynamically \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"#!/usr/bin/python\n\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect(\"localhost\",\"testuser\",\"test123\",\"TESTDB\" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to INSERT a record into the database.\nsql = \"INSERT INTO EMPLOYEE(FIRST_NAME, \\\n       LAST_NAME, AGE, SEX, INCOME) \\\n       VALUES ('%s', '%s', '%d', '%c', '%d' )\" % \\\n       ('Mac', 'Mohan', 20, 'M', 2000)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"Following code segment is another form of execution where you can pass parameters directly \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'..................................\nuser_id = "test123"\npassword = "password"\n\ncon.execute(\'insert into Login values("%s", "%s")\' % \\\n(user_id, password))\n..................................\n'})}),"\n",(0,s.jsx)(n.h2,{id:"read-operation",children:"READ Operation"}),"\n",(0,s.jsx)(n.p,{children:"READ Operation on any database means to fetch some useful information from the database."}),"\n",(0,s.jsxs)(n.p,{children:["Once our database connection is established, you are ready to make a query into this database. You can use either ",(0,s.jsx)(n.strong,{children:"fetchone()"})," method to fetch single record or ",(0,s.jsx)(n.strong,{children:"fetchall()"})," method to fetech multiple values from a database table."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"fetchone()"})," \u2212 It fetches the next row of a query result set. A result set is an object that is returned when a cursor object is used to query a table."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"fetchall()"})," \u2212 It fetches all the rows in a result set. If some rows have already been extracted from the result set, then it retrieves the remaining rows from the result set."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"rowcount"})," \u2212 This is a read-only attribute and returns the number of rows that were affected by an execute() method."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"The following procedure queries all the records from EMPLOYEE table having salary more than 1000 \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect("localhost","testuser","test123","TESTDB" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\nsql = "SELECT * FROM EMPLOYEE \\\n       WHERE INCOME > \'%d\'" % (1000)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Fetch all the rows in a list of lists.\n   results = cursor.fetchall()\n   for row in results:\n      fname = row[0]\n      lname = row[1]\n      age = row[2]\n      sex = row[3]\n      income = row[4]\n      # Now print fetched result\n      print "fname=%s,lname=%s,age=%d,sex=%s,income=%d" % \\\n             (fname, lname, age, sex, income )\nexcept:\n   print "Error: unable to fecth data"\n\n# disconnect from server\ndb.close()\n'})}),"\n",(0,s.jsx)(n.p,{children:"This will produce the following result \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"fname=Mac, lname=Mohan, age=20, sex=M, income=2000\n"})}),"\n",(0,s.jsx)(n.h2,{id:"update-operation",children:"Update Operation"}),"\n",(0,s.jsx)(n.p,{children:"UPDATE Operation on any database means to update one or more records, which are already available in the database."}),"\n",(0,s.jsxs)(n.p,{children:["The following procedure updates all the records having SEX as ",(0,s.jsx)(n.strong,{children:"'M'"}),". Here, we increase AGE of all the males by one year."]}),"\n",(0,s.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect("localhost","testuser","test123","TESTDB" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to UPDATE required records\nsql = "UPDATE EMPLOYEE SET AGE = AGE + 1\n                          WHERE SEX = \'%c\'" % (\'M\')\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"delete-operation",children:"DELETE Operation"}),"\n",(0,s.jsx)(n.p,{children:"DELETE operation is required when you want to delete some records from your database. Following is the procedure to delete all the records from EMPLOYEE where AGE is more than 20 \u2212"}),"\n",(0,s.jsx)(n.h3,{id:"example-6",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport MySQLdb\n\n# Open database connection\ndb = MySQLdb.connect("localhost","testuser","test123","TESTDB" )\n\n# prepare a cursor object using cursor() method\ncursor = db.cursor()\n\n# Prepare SQL query to DELETE required records\nsql = "DELETE FROM EMPLOYEE WHERE AGE > \'%d\'" % (20)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n\n# disconnect from server\ndb.close()\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performing-transactions",children:"Performing Transactions"}),"\n",(0,s.jsx)(n.p,{children:"Transactions are a mechanism that ensures data consistency. Transactions have the following four properties \u2212"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Atomicity"})," \u2212 Either a transaction completes or nothing happens at all."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"})," \u2212 A transaction must start in a consistent state and leave the system in a consistent state."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Isolation"})," \u2212 Intermediate results of a transaction are not visible outside the current transaction."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Durability"})," \u2212 Once a transaction was committed, the effects are persistent, even after a system failure."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["The Python DB API 2.0 provides two methods to either ",(0,s.jsx)(n.em,{children:"commit"})," or ",(0,s.jsx)(n.em,{children:"rollback"})," a transaction."]}),"\n",(0,s.jsx)(n.h3,{id:"example-7",children:"Example"}),"\n",(0,s.jsx)(n.p,{children:"You already know how to implement transactions. Here is again similar example \u2212"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Prepare SQL query to DELETE required records\nsql = \"DELETE FROM EMPLOYEE WHERE AGE > '%d'\" % (20)\ntry:\n   # Execute the SQL command\n   cursor.execute(sql)\n   # Commit your changes in the database\n   db.commit()\nexcept:\n   # Rollback in case there is any error\n   db.rollback()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"commit-operation",children:"COMMIT Operation"}),"\n",(0,s.jsx)(n.p,{children:"Commit is the operation, which gives a green signal to database to finalize the changes, and after this operation, no change can be reverted back."}),"\n",(0,s.jsxs)(n.p,{children:["Here is a simple example to call ",(0,s.jsx)(n.strong,{children:"commit"})," method."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.commit()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"rollback-operation",children:"ROLLBACK Operation"}),"\n",(0,s.jsxs)(n.p,{children:["If you are not satisfied with one or more of the changes and you want to revert back those changes completely, then use ",(0,s.jsx)(n.strong,{children:"rollback()"})," method."]}),"\n",(0,s.jsxs)(n.p,{children:["Here is a simple example to call ",(0,s.jsx)(n.strong,{children:"rollback()"})," method."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.rollback()\n"})}),"\n",(0,s.jsx)(n.h2,{id:"disconnecting-database",children:"Disconnecting Database"}),"\n",(0,s.jsx)(n.p,{children:"To disconnect Database connection, use close() method."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"db.close()\n"})}),"\n",(0,s.jsx)(n.p,{children:"If the connection to a database is closed by the user with the close() method, any outstanding transactions are rolled back by the DB. However, instead of depending on any of DB lower level implementation details, your application would be better off calling commit or rollback explicitly."}),"\n",(0,s.jsx)(n.h2,{id:"handling-errors",children:"Handling Errors"}),"\n",(0,s.jsx)(n.p,{children:"There are many sources of errors. A few examples are a syntax error in an executed SQL statement, a connection failure, or calling the fetch method for an already canceled or finished statement handle."}),"\n",(0,s.jsx)(n.p,{children:"The DB API defines a number of errors that must exist in each database module. The following table lists these exceptions."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Sr.No."}),(0,s.jsx)(n.th,{style:{textAlign:"center"},children:"Exception & Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"1"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"Warning"}),"Used for non-fatal issues. Must subclass StandardError."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"2"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"Error"}),"Base class for errors. Must subclass StandardError."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"3"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"InterfaceError"}),"Used for errors in the database module, not the database itself. Must subclass Error."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"4"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"DatabaseError"}),"Used for errors in the database. Must subclass Error."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"5"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"DataError"}),"Subclass of DatabaseError that refers to errors in the data."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"6"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"OperationalError"}),"Subclass of DatabaseError that refers to errors such as the loss of a connection to the database. These errors are generally outside of the control of the Python scripter."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"7"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"IntegrityError"}),"Subclass of DatabaseError for situations that would damage the relational integrity, such as uniqueness constraints or foreign keys."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"8"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"InternalError"}),"Subclass of DatabaseError that refers to errors internal to the database module, such as a cursor no longer being active."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"9"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"ProgrammingError"}),"Subclass of DatabaseError that refers to errors such as a bad table name and other things that can safely be blamed on you."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"center"},children:"10"}),(0,s.jsxs)(n.td,{style:{textAlign:"center"},children:[(0,s.jsx)(n.strong,{children:"NotSupportedError"}),"Subclass of DatabaseError that refers to trying to call unsupported functionality."]})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"Your Python scripts should handle these errors, but before using any of the above exceptions, make sure your MySQLdb has support for that exception. You can get more information about them by reading the DB API 2.0 specification."})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkmy_site=self.webpackChunkmy_site||[]).push([[7720],{4462:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>h,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Document 001/025","title":"25. Multithreaded Programming","description":"Running several...","source":"@site/docs/Document 001/025.md","sourceDirName":"Document 001","slug":"/Document 001/025","permalink":"/docs/Document 001/025","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"25. Multithreaded Programming","description":"Running several...","lead":"","date":"2022-01-25T13:41:39.000Z","lastmod":"2022-01-25T13:41:39.000Z","draft":false,"images":[],"type":"docs","toc":true,"weight":25},"sidebar":"sidebar_doc_001","previous":{"title":"24. Sending Email","permalink":"/docs/Document 001/024"},"next":{"title":"26. XML Processing","permalink":"/docs/Document 001/026"}}');var a=t(4848),i=t(8453);const h={title:"25. Multithreaded Programming",description:"Running several...",lead:"",date:new Date("2022-01-25T13:41:39.000Z"),lastmod:new Date("2022-01-25T13:41:39.000Z"),draft:!1,images:[],type:"docs",toc:!0,weight:25},s=void 0,d={},l=[{value:"Starting a New Thread",id:"starting-a-new-thread",level:2},{value:"Example",id:"example",level:3},{value:"The <em>Threading</em> Module",id:"the-threading-module",level:2},{value:"Creating Thread Using <em>Threading</em> Module",id:"creating-thread-using-threading-module",level:2},{value:"Example",id:"example-1",level:3},{value:"Synchronizing Threads",id:"synchronizing-threads",level:2},{value:"Example",id:"example-2",level:3},{value:"Multithreaded Priority Queue",id:"multithreaded-priority-queue",level:2},{value:"Example",id:"example-3",level:3}];function o(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Running several threads is similar to running several different programs concurrently, but with the following benefits \u2212"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Multiple threads within a process share the same data space with the main thread and can therefore share information or communicate with each other more easily than if they were separate processes."}),"\n",(0,a.jsx)(n.li,{children:"Threads sometimes called light-weight processes and they do not require much memory overhead; they are cheaper than processes."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"A thread has a beginning, an execution sequence, and a conclusion. It has an instruction pointer that keeps track of where within its context it is currently running."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"It can be pre-empted (interrupted)"}),"\n",(0,a.jsx)(n.li,{children:"It can temporarily be put on hold (also known as sleeping) while other threads are running - this is called yielding."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"starting-a-new-thread",children:"Starting a New Thread"}),"\n",(0,a.jsxs)(n.p,{children:["To spawn another thread, you need to call following method available in ",(0,a.jsx)(n.em,{children:"thread"})," module \u2212"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"thread.start_new_thread ( function, args[, kwargs] )\n"})}),"\n",(0,a.jsx)(n.p,{children:"This method call enables a fast and efficient way to create new threads in both Linux and Windows."}),"\n",(0,a.jsxs)(n.p,{children:["The method call returns immediately and the child thread starts and calls function with the passed list of ",(0,a.jsx)(n.em,{children:"args"}),". When function returns, the thread terminates."]}),"\n",(0,a.jsxs)(n.p,{children:["Here, ",(0,a.jsx)(n.em,{children:"args"})," is a tuple of arguments; use an empty tuple to call function without passing any arguments. ",(0,a.jsx)(n.em,{children:"kwargs"})," is an optional dictionary of keyword arguments."]}),"\n",(0,a.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport thread\nimport time\n\n# Define a function for the thread\ndef print_time( threadName, delay):\n   count = 0\n   while count < 5:\n      time.sleep(delay)\n      count += 1\n      print "%s: %s" % ( threadName, time.ctime(time.time()) )\n\n# Create two threads as follows\ntry:\n   thread.start_new_thread( print_time, ("Thread-1", 2, ) )\n   thread.start_new_thread( print_time, ("Thread-2", 4, ) )\nexcept:\n   print "Error: unable to start thread"\n\nwhile 1:\n   pass\n'})}),"\n",(0,a.jsx)(n.p,{children:"When the above code is executed, it produces the following result \u2212"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Thread-1: Thu Jan 22 15:42:17 2009\nThread-1: Thu Jan 22 15:42:19 2009\nThread-2: Thu Jan 22 15:42:19 2009\nThread-1: Thu Jan 22 15:42:21 2009\nThread-2: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:23 2009\nThread-1: Thu Jan 22 15:42:25 2009\nThread-2: Thu Jan 22 15:42:27 2009\nThread-2: Thu Jan 22 15:42:31 2009\nThread-2: Thu Jan 22 15:42:35 2009\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Although it is very effective for low-level threading, but the ",(0,a.jsx)(n.em,{children:"thread"})," module is very limited compared to the newer threading module."]}),"\n",(0,a.jsxs)(n.h2,{id:"the-threading-module",children:["The ",(0,a.jsx)(n.em,{children:"Threading"})," Module"]}),"\n",(0,a.jsx)(n.p,{children:"The newer threading module included with Python 2.4 provides much more powerful, high-level support for threads than the thread module discussed in the previous section."}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.em,{children:"threading"})," module exposes all the methods of the ",(0,a.jsx)(n.em,{children:"thread"})," module and provides some additional methods \u2212"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"threading.activeCount()"})," \u2212 Returns the number of thread objects that are active."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"threading.currentThread()"})," \u2212 Returns the number of thread objects in the caller's thread control."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"threading.enumerate()"})," \u2212 Returns a list of all thread objects that are currently active."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["In addition to the methods, the threading module has the ",(0,a.jsx)(n.em,{children:"Thread"})," class that implements threading. The methods provided by the ",(0,a.jsx)(n.em,{children:"Thread"})," class are as follows \u2212"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"run()"})," \u2212 The run() method is the entry point for a thread."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"start()"})," \u2212 The start() method starts a thread by calling the run method."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"join([time])"})," \u2212 The join() waits for threads to terminate."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"isAlive()"})," \u2212 The isAlive() method checks whether a thread is still executing."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"getName()"})," \u2212 The getName() method returns the name of a thread."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"setName()"})," \u2212 The setName() method sets the name of a thread."]}),"\n"]}),"\n",(0,a.jsxs)(n.h2,{id:"creating-thread-using-threading-module",children:["Creating Thread Using ",(0,a.jsx)(n.em,{children:"Threading"})," Module"]}),"\n",(0,a.jsx)(n.p,{children:"To implement a new thread using the threading module, you have to do the following \u2212"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Define a new subclass of the ",(0,a.jsx)(n.em,{children:"Thread"})," class."]}),"\n",(0,a.jsxs)(n.li,{children:["Override the ",(0,a.jsxs)(n.em,{children:[(0,a.jsx)(n.strong,{children:"init"}),"(self [,args])"]})," method to add additional arguments."]}),"\n",(0,a.jsx)(n.li,{children:"Then, override the run(self [,args]) method to implement what the thread should do when started."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Once you have created the new ",(0,a.jsx)(n.em,{children:"Thread"})," subclass, you can create an instance of it and then start a new thread by invoking the ",(0,a.jsx)(n.em,{children:"start()"}),", which in turn calls ",(0,a.jsx)(n.em,{children:"run()"})," method."]}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print "Starting " + self.name\n      print_time(self.name, 5, self.counter)\n      print "Exiting " + self.name\n\ndef print_time(threadName, counter, delay):\n   while counter:\n      if exitFlag:\n         threadName.exit()\n      time.sleep(delay)\n      print "%s: %s" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\n# Create new threads\nthread1 = myThread(1, "Thread-1", 1)\nthread2 = myThread(2, "Thread-2", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\nprint "Exiting Main Thread"\n'})}),"\n",(0,a.jsx)(n.p,{children:"When the above code is executed, it produces the following result \u2212"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Starting Thread-1\nStarting Thread-2\nExiting Main Thread\nThread-1: Thu Mar 21 09:10:03 2013\nThread-1: Thu Mar 21 09:10:04 2013\nThread-2: Thu Mar 21 09:10:04 2013\nThread-1: Thu Mar 21 09:10:05 2013\nThread-1: Thu Mar 21 09:10:06 2013\nThread-2: Thu Mar 21 09:10:06 2013\nThread-1: Thu Mar 21 09:10:07 2013\nExiting Thread-1\nThread-2: Thu Mar 21 09:10:08 2013\nThread-2: Thu Mar 21 09:10:10 2013\nThread-2: Thu Mar 21 09:10:12 2013\nExiting Thread-2\n"})}),"\n",(0,a.jsx)(n.h2,{id:"synchronizing-threads",children:"Synchronizing Threads"}),"\n",(0,a.jsxs)(n.p,{children:["The threading module provided with Python includes a simple-to-implement locking mechanism that allows you to synchronize threads. A new lock is created by calling the ",(0,a.jsx)(n.em,{children:"Lock()"})," method, which returns the new lock."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.em,{children:"acquire(blocking)"})," method of the new lock object is used to force threads to run synchronously. The optional ",(0,a.jsx)(n.em,{children:"blocking"})," parameter enables you to control whether the thread waits to acquire the lock."]}),"\n",(0,a.jsxs)(n.p,{children:["If ",(0,a.jsx)(n.em,{children:"blocking"})," is set to 0, the thread returns immediately with a 0 value if the lock cannot be acquired and with a 1 if the lock was acquired. If blocking is set to 1, the thread blocks and wait for the lock to be released."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.em,{children:"release()"})," method of the new lock object is used to release the lock when it is no longer required."]}),"\n",(0,a.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport threading\nimport time\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, counter):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.counter = counter\n   def run(self):\n      print "Starting " + self.name\n      # Get lock to synchronize threads\n      threadLock.acquire()\n      print_time(self.name, self.counter, 3)\n      # Free lock to release next thread\n      threadLock.release()\n\ndef print_time(threadName, delay, counter):\n   while counter:\n      time.sleep(delay)\n      print "%s: %s" % (threadName, time.ctime(time.time()))\n      counter -= 1\n\nthreadLock = threading.Lock()\nthreads = []\n\n# Create new threads\nthread1 = myThread(1, "Thread-1", 1)\nthread2 = myThread(2, "Thread-2", 2)\n\n# Start new Threads\nthread1.start()\nthread2.start()\n\n# Add threads to thread list\nthreads.append(thread1)\nthreads.append(thread2)\n\n# Wait for all threads to complete\nfor t in threads:\n    t.join()\nprint "Exiting Main Thread"\n'})}),"\n",(0,a.jsx)(n.p,{children:"When the above code is executed, it produces the following result \u2212"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Starting Thread-1\nStarting Thread-2\nThread-1: Thu Mar 21 09:11:28 2013\nThread-1: Thu Mar 21 09:11:29 2013\nThread-1: Thu Mar 21 09:11:30 2013\nThread-2: Thu Mar 21 09:11:32 2013\nThread-2: Thu Mar 21 09:11:34 2013\nThread-2: Thu Mar 21 09:11:36 2013\nExiting Main Thread\n"})}),"\n",(0,a.jsx)(n.h2,{id:"multithreaded-priority-queue",children:"Multithreaded Priority Queue"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.em,{children:"Queue"})," module allows you to create a new queue object that can hold a specific number of items. There are following methods to control the Queue \u2212"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"get()"})," \u2212 The get() removes and returns an item from the queue."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"put()"})," \u2212 The put adds item to a queue."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"qsize()"})," \u2212 The qsize() returns the number of items that are currently in the queue."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"empty()"})," \u2212 The empty( ) returns True if queue is empty; otherwise, False."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"full()"})," \u2212 the full() returns True if queue is full; otherwise, False."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'#!/usr/bin/python\n\nimport Queue\nimport threading\nimport time\n\nexitFlag = 0\n\nclass myThread (threading.Thread):\n   def __init__(self, threadID, name, q):\n      threading.Thread.__init__(self)\n      self.threadID = threadID\n      self.name = name\n      self.q = q\n   def run(self):\n      print "Starting " + self.name\n      process_data(self.name, self.q)\n      print "Exiting " + self.name\n\ndef process_data(threadName, q):\n   while not exitFlag:\n      queueLock.acquire()\n         if not workQueue.empty():\n            data = q.get()\n            queueLock.release()\n            print "%s processing %s" % (threadName, data)\n         else:\n            queueLock.release()\n         time.sleep(1)\n\nthreadList = ["Thread-1", "Thread-2", "Thread-3"]\nnameList = ["One", "Two", "Three", "Four", "Five"]\nqueueLock = threading.Lock()\nworkQueue = Queue.Queue(10)\nthreads = []\nthreadID = 1\n\n# Create new threads\nfor tName in threadList:\n   thread = myThread(threadID, tName, workQueue)\n   thread.start()\n   threads.append(thread)\n   threadID += 1\n\n# Fill the queue\nqueueLock.acquire()\nfor word in nameList:\n   workQueue.put(word)\nqueueLock.release()\n\n# Wait for queue to empty\nwhile not workQueue.empty():\n   pass\n\n# Notify threads it\'s time to exit\nexitFlag = 1\n\n# Wait for all threads to complete\nfor t in threads:\n   t.join()\nprint "Exiting Main Thread"\n'})}),"\n",(0,a.jsx)(n.p,{children:"When the above code is executed, it produces the following result \u2212"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"Starting Thread-1\nStarting Thread-2\nStarting Thread-3\nThread-1 processing One\nThread-2 processing Two\nThread-3 processing Three\nThread-1 processing Four\nThread-2 processing Five\nExiting Thread-3\nExiting Thread-1\nExiting Thread-2\nExiting Main Thread\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>h,x:()=>s});var r=t(6540);const a={},i=r.createContext(a);function h(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:h(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);